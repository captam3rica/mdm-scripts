#!/bin/sh

#
# Modified from Jamfs Encrypted-Script-Parameters
#       https://github.com/jamf/Encrypted-Script-Parameters
#

###############################################################################
#
#   DESCRIPTION
#
#       Use the following function to decrypt a string.
#
#           decrypt_string "$ENCRYPTED_STRING" "$SALT" "$K"
#
#       decrypt_string is enbeded in the script that needs to use the encrypted
#       paramenter. The salt and password are enbeded in the script and passed
#       to the decrypt_string function.
#
################################################################################

# This variable should be passed as a parameter in the Jamf Policy.
ENCRYPTED_STRING=""

# These are generated by the generate_encrypted_string function.
SALT="your_salt"
K="your_password"

OPENSSL_BIN="/usr/bin/openssl"

# Make sure that the $4 parameter is populated.
if [ "$ENCRYPTED_STRING" = "" ] && [ "$4" != "" ]; then
    # Make sure that the $ENCRYPTED_STRING variable is empty and that the $4
    # is not empty.
    ENCRYPTED_STRING="$4"

else
    /usr/bin/logger "The parameter in the Jamf policy is empty or the ENCRYPTED_STRING variable at the top of this script is not empty X) ..."
    /usr/bin/logger "Please resolve before continuing ..."
    exit 1
fi


decrypt_string() {
    # Decrypt a string
    #
    # This function decrypts a hashed string passed as a parameter. The salt
    # and password are hardcoded in the script.
    #
    # Usage: decrypt_string "encrypted_string" "Salt" "Password"

    DECRYPTED_STRING=$(/bin/echo "$1" | \
        "$OPENSSL_BIN" enc -aes256 -d -a -A -S "$2" -k "$3")

    RETURN="$?"

    if [ "$RETURN" -ne 0 ]; then
        # Something went wrong
        /usr/bin/logger "OPENSSL: Something did not go right during decryption."
        exit "$RETURN"
    else
        /bin/echo "$DECRYPTED_STRING"
    fi
}
